{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js","./src/common/billing/upgrade-page/billing-plans-resolver.service.ts","./src/common/billing/upgrade-page/accepted-payments-header/accepted-payments-header.component.html","./src/common/billing/upgrade-page/accepted-payments-header/accepted-payments-header.component.ts","./src/common/billing/upgrade-page/plan-features-list/plan-features-list.component.html","./src/common/billing/upgrade-page/plan-features-list/plan-features-list.component.ts","./src/common/billing/upgrade-page/upgrade-page-aside/upgrade-page-aside.component.html","./src/common/billing/upgrade-page/upgrade-page-aside/upgrade-page-aside.component.ts","./src/common/billing/upgrade-page/order-summary/order-summary.component.html","./src/common/billing/upgrade-page/order-summary/order-summary.component.ts","./src/common/billing/credit-card-form/credit-card-form.component.html","./src/common/billing/credit-card-form/credit-card-form.component.ts","./src/common/billing/subscriptions/create-subscription-panel/create-subscription-panel.component.html","./src/common/billing/subscriptions/create-subscription-panel/create-subscription-panel.component.ts","./src/common/billing/subscriptions/user-subscription-page/user-subscription-page.component.html","./src/common/billing/subscriptions/user-subscription-page/user-subscription-page.component.ts","./src/common/billing/upgrade-page/currencies-list-resolver.service.ts","./src/common/billing/guards/user-subscribed-guard.service.ts","./src/common/billing/invoices/invoice.service.ts","./src/common/billing/invoices/invoice-index/invoice-index.component.html","./src/common/billing/invoices/invoice-index/invoice-index.component.ts","./src/common/billing/pricing-page/pricing-page.component.ts","./src/common/billing/pricing-page/pricing-page.component.html","./src/common/billing/billing-routing.module.ts","./src/common/billing/guards/redirect-to-upgrade-page.service.ts","./src/common/billing/plans/select-plan-panel/select-plan-panel.component.html","./src/common/billing/plans/select-plan-panel/select-plan-panel.component.ts","./src/common/billing/plans/select-plan-period-panel/select-plan-period-panel.component.html","./src/common/billing/plans/select-plan-period-panel/select-plan-period-panel.component.ts","./src/common/billing/guards/user-not-subscribed-guard.service.ts","./src/common/billing/upgrade-page/contact-widget/contact-widget.component.ts","./src/common/billing/upgrade-page/contact-widget/contact-widget.component.html","./src/common/billing/billing.module.ts","./src/common/shared/billing/full-plan-name/full-plan-name.component.ts","./src/common/shared/billing/full-plan-name/full-plan-name.module.ts","./src/common/shared/billing/guards/billing-enabled-guard.service.ts","./src/common/shared/billing/plans.service.ts"],"names":["_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","multi","MatRadioChange","constructor","source","value","this","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","coerceBooleanProperty","ngAfterContentInit","_touch","_radios","forEach","radio","name","_markForCheck","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","ɵfac","t","ɵngcc0","ɵdir","type","inputs","labelPosition","required","outputs","ɵMatRadioGroup_BaseFactory","selectors","contentQueries","rf","ctx","dirIndex","MatRadioButton","_t","hostAttrs","exportAs","features","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","mixinDisableRipple","mixinTabIndex","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","super","_uniqueId","id","_checked","_removeUniqueSelectionListener","coerceNumberProperty","listen","newCheckedState","notify","_setDisabled","_color","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","ɵngcc1","ɵngcc2","String","undefined","viewQuery","first","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","ANIMATION_MODULE_TYPE","ɵcmp","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","$event","_r0","inputId","directives","ɵngcc3","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports","MatRippleModule","MatCommonModule","BillingPlansResolver","plans","router","route","state","all","order","perPage","pipe","map","response","pagination","data","catchError","navigateByUrl","E","mergeMap","of","AcceptedPaymentsHeaderComponent","settings","el","acceptedCards","getJson","card","getAssetUrl","toLowerCase","PlanFeaturesListComponent","showCheckIcons","dense","plan","parent","UpgradePageAsideComponent","OrderSummaryComponent","CreditCardFormComponent","subscriptions","currentUser","zone","lazyLoader","toast","theme","created","submitButtonText","showSubmitButton","showOrderSummary","loading$","BehaviorSubject","error$","stripeElements","resetForm","initStripe","destroyStripe","next","token","error","stripe","createToken","message","addCardToUser","stripeToken","addCard","finalize","assignCurrent","user","errResponse","loadAsset","then","Stripe","get","elements","isDarkMode","selectedTheme$","is_dark","field","create","classes","base","style","mount","on","onChange","bind","push","unmount","destroy","run","submitForm","CreateSubscriptionPanelComponent","paypal","selectedIndex$","loading","submitText","disablePaypalTab","completed","getSubscription","gateway","planId","status","startLoading","createOnStripe","getNewSubscriptionPayload","completeSubscription","confirmCardPayment","open","last_payment_error","key","Object","keys","errors","stopLoading","payment_intent_secret","result","action","onAction","finalizeOnStripe","reference","finalResponse","catch","payload","plan_id","from","renews_at","UserSubscriptionPageComponent","modal","activeSubscription$","onGracePeriod","isSubscribed","ends_at","split","title","body","ok","cancel","afterClosed","confirmed","cancelSubscription","resume","setSubscription","subscription","e","delete","params","request","share","updateUserAndSubscription","CurrenciesListResolver","valueLists","currencies","toPromise","UserSubscribedGuard","handle","navigate","InvoiceService","http","InvoiceIndexComponent","invoices","invoices$","index","userId","invoice","getBaseUrl","uuid","PricingPageComponent","routes","path","component","canActivate","RedirectToUpgradePage","listener","active","isLoggedIn","resolve","canActivateChild","children","BillingRoutingModule","SelectPlanPanelComponent","hasRecommendedPlan","filter","recommended","length","selectInitialPlan","setTimeout","parent_id","hidden","mode","free","model$","userSubscribedToPlan","SelectPlanPeriodPanelComponent","showSidebar","baseAmount","getAmountPerDay","amount","Math","ceil","days","interval","interval_count","UserNotSubscribedGuard","ContactWidgetComponent","BillingModule","FullPlanNameComponent","i18n","FullPlanNameModule","BillingEnabledGuard","Plans","BASE_URI","post","put","ids"],"mappings":"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","file":"819.7ecaa3e0d1b54165dc7b.js","sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = /*@__PURE__*/ function () { let ɵMatRadioGroup_BaseFactory; return function MatRadioGroup_Factory(t) { return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup); }; }();\nMatRadioGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map","import {Injectable} from '@angular/core';\nimport {Resolve, RouterStateSnapshot, ActivatedRouteSnapshot, Router} from '@angular/router';\nimport {catchError, map, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {Plan} from '@common/core/types/models/Plan';\nimport {Plans} from '@common/shared/billing/plans.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BillingPlansResolver implements Resolve<Plan[]> {\n    constructor(\n        private plans: Plans,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Plan[]> {\n        return this.plans.all({order: 'position|asc', perPage: 30})\n            .pipe(map(response => response.pagination.data))\n            .pipe(\n                catchError(() => {\n                    this.router.navigateByUrl('/');\n                    return EMPTY;\n                }),\n                mergeMap((plans: Plan[]) => {\n                    return of(plans);\n                })\n            );\n    }\n}\n\n","<div class=\"text\" trans>Accepted Payment Methods</div>\n<div class=\"card-icons\">\n    <img [src]=\"getCardIcon('paypal')\" *ngIf=\"settings.get('billing.paypal.enable')\">\n    <img [src]=\"getCardIcon(card)\" *ngFor=\"let card of acceptedCards\">\n</div>\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\n\n@Component({\n    selector: 'accepted-payments-header',\n    templateUrl: './accepted-payments-header.component.html',\n    styleUrls: ['./accepted-payments-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AcceptedPaymentsHeaderComponent implements OnInit {\n    public acceptedCards: string[] = [];\n\n    constructor(public settings: Settings, public el: ElementRef) {}\n\n    ngOnInit() {\n        this.acceptedCards = this.settings.getJson('billing.accepted_cards', []);\n    }\n\n    public getCardIcon(card: string) {\n        return this.settings.getAssetUrl() + 'images/billing/' + card.toLowerCase() + '.png';\n    }\n}\n","<ul class=\"unstyled-list\" *ngIf=\"getPlan()\" [class.dense]=\"dense\">\n    <ng-container *ngIf=\"getPlan().show_permissions\">\n        <li *ngFor=\"let permission of getPlan().permissions\">\n            <mat-icon class=\"check-icon\" svgIcon=\"check\" *ngIf=\"showCheckIcons\"></mat-icon>\n            <span trans>{{permission.display_name || permission.name}}</span>\n        </li>\n    </ng-container>\n    <ng-container *ngIf=\"getPlan().features.length\">\n        <li *ngFor=\"let feature of getPlan().features\">\n            <mat-icon class=\"check-icon\" svgIcon=\"check\" *ngIf=\"showCheckIcons\"></mat-icon>\n            <span trans>{{feature}}</span>\n        </li>\n    </ng-container>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {Plan} from '@common/core/types/models/Plan';\n\n@Component({\n    selector: 'plan-features-list',\n    templateUrl: './plan-features-list.component.html',\n    styleUrls: ['./plan-features-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlanFeaturesListComponent {\n    @Input() plan: Plan;\n    @Input() showCheckIcons = false;\n    @Input() dense = false;\n\n    public getPlan() {\n        return this.plan.parent || this.plan;\n    }\n}\n","<accepted-payments-header></accepted-payments-header>\n\n<ng-container *ngIf=\"plan\">\n    <div class=\"selected-plan\">\n        <div class=\"header\"><full-plan-name [plan]=\"plan\"></full-plan-name></div>\n        <plan-features-list class=\"plan-features-list\" [plan]=\"plan\" [showCheckIcons]=\"true\" [dense]=\"true\"></plan-features-list>\n    </div>\n\n    <div class=\"divider\"></div>\n\n    <div class=\"secure-shopping\">\n        <div class=\"icon-container\">\n            <mat-icon svgIcon=\"shield-custom\"></mat-icon>\n        </div>\n        <div class=\"text\">\n            <div class=\"primary\" trans>SSL Secure Payment</div>\n            <div class=\"secondary\" trans>Your information is protected by 256-bit SSL encryption</div>\n        </div>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {Plan} from '@common/core/types/models/Plan';\n\n@Component({\n    selector: 'upgrade-page-aside',\n    templateUrl: './upgrade-page-aside.component.html',\n    styleUrls: ['./upgrade-page-aside.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpgradePageAsideComponent {\n    @Input() plan: Plan;\n}\n","<ng-container *ngIf=\"state.selectedPlan$ | async as selectedPlan\">\n    <div class=\"line\">\n        <div class=\"summary-left\">\n            <full-plan-name [plan]=\"selectedPlan\"></full-plan-name>\n        </div>\n        <div class=\"summary-right\">{{selectedPlan.amount | currency:selectedPlan.currency}}</div>\n    </div>\n\n    <div class=\"line emphasis\">\n        <div class=\"summary-left\" trans>Total</div>\n        <div class=\"summary-right\">{{selectedPlan.amount | currency:selectedPlan.currency}}</div>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {SubscriptionStepperState} from '@common/billing/subscriptions/subscription-stepper-state.service';\n\n@Component({\n    selector: 'order-summary',\n    templateUrl: './order-summary.component.html',\n    styleUrls: ['./order-summary.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderSummaryComponent {\n    constructor(public state: SubscriptionStepperState) {}\n}\n","<form (ngSubmit)=\"submitForm()\" class=\"card-form many-inputs\" ngNativeValidate>\n    <div class=\"input-container\">\n        <label for=\"cardNumber\" trans>Credit or Debit Card</label>\n        <div id=\"cardNumber\" class=\"fake-input\"></div>\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"cardExpiry\" trans>Card Expiration</label>\n        <div id=\"cardExpiry\" class=\"fake-input\"></div>\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"cardCvc\" trans>CVC</label>\n        <div id=\"cardCvc\" class=\"fake-input\"></div>\n    </div>\n\n    <div class=\"error margin-bottom\" role=\"alert\" *ngIf=\"error$ | async as error\">{{error}}</div>\n\n    <order-summary *ngIf=\"showOrderSummary\"></order-summary>\n\n    <button type=\"submit\" *ngIf=\"showSubmitButton\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\">{{submitButtonText | trans}}</button>\n</form>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output\n} from '@angular/core';\nimport {finalize} from 'rxjs/operators';\nimport {User} from '../../core/types/models/User';\nimport {Settings} from '../../core/config/settings.service';\nimport {LazyLoaderService} from '../../core/utils/lazy-loader.service';\nimport {CurrentUser} from '../../auth/current-user';\nimport {Subscriptions} from '../../shared/billing/subscriptions.service';\nimport {Toast} from '../../core/ui/toast.service';\nimport {ThemeService} from '@common/core/theme.service';\nimport {BehaviorSubject} from 'rxjs';\nimport {SubscriptionStepperState} from '@common/billing/subscriptions/subscription-stepper-state.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\n@Component({\n    selector: 'credit-card-form',\n    templateUrl: './credit-card-form.component.html',\n    styleUrls: ['./credit-card-form.component.scss'],\n    // changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreditCardFormComponent implements OnDestroy, AfterViewInit {\n\n    /**\n     * Event fired when form is submitted and card is added successfully on active gateway.\n     */\n    @Output() created: EventEmitter<User> = new EventEmitter();\n\n    /**\n     * Display text for form submit button.\n     */\n    @Input() submitButtonText = 'Submit';\n\n    /**\n     * Whether form submit button should be shown.\n     */\n    @Input() showSubmitButton = true;\n\n    /**\n     * Whether order summary should be shown in the template.\n     */\n    @Input() showOrderSummary = false;\n\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public error$ = new BehaviorSubject<string>(null);\n    private stripeElements: stripe.elements.Element[] = [];\n\n    constructor(\n        private subscriptions: Subscriptions,\n        private currentUser: CurrentUser,\n        private settings: Settings,\n        private zone: NgZone,\n        private lazyLoader: LazyLoaderService,\n        private toast: Toast,\n        private theme: ThemeService,\n        private state: SubscriptionStepperState,\n    ) {\n        this.resetForm();\n    }\n\n    ngAfterViewInit() {\n        this.initStripe();\n    }\n\n    ngOnDestroy() {\n        this.destroyStripe();\n    }\n\n    /**\n     * Submit stripe elements credit card form.\n     */\n    public async submitForm() {\n        this.loading$.next(true);\n\n        const {token, error} = await this.state.stripe.createToken(this.stripeElements[0]);\n\n        if (error) {\n            this.error$.next(error.message);\n            this.loading$.next(false);\n        } else {\n            this.addCardToUser(token);\n        }\n    }\n\n    public addCardToUser(stripeToken: stripe.Token) {\n        this.loading$.next(true);\n        this.subscriptions.addCard(stripeToken.id)\n            .pipe(finalize(() =>  this.loading$.next(false)))\n            .subscribe(response => {\n                this.resetForm();\n                this.currentUser.assignCurrent(response.user);\n                this.created.emit(response.user);\n            }, (errResponse: BackendErrorResponse) => {\n                this.error$.next(errResponse.message);\n            });\n    }\n\n    /**\n     * Initiate stripe elements credit card form.\n     */\n    private initStripe() {\n        this.lazyLoader.loadAsset('https://js.stripe.com/v3', {type: 'js'}).then(() => {\n            const fields = ['cardNumber', 'cardExpiry', 'cardCvc'] as stripe.elements.elementsType[];\n            this.state.stripe = Stripe(this.settings.get('billing.stripe_public_key'));\n            const elements = this.state.stripe.elements();\n\n            const isDarkMode = this.theme.selectedTheme$.value.is_dark;\n            fields.forEach(field => {\n                const el = elements.create(field, {classes: {base: 'base'}, style: {base: {color: isDarkMode ? '#fff' : 'inherit'}}});\n                el.mount('#' + field);\n                el.on('change', this.onChange.bind(this));\n                this.stripeElements.push(el);\n            });\n        });\n    }\n\n    /**\n     * Destroy all stripe elements instances.\n     */\n    private destroyStripe() {\n        this.stripeElements.forEach(el => {\n            el.unmount();\n            el.destroy();\n        });\n    }\n\n    /**\n     * Fired on stripe element \"change\" event.\n     */\n    private onChange(change: stripe.elements.ElementChangeResponse) {\n        this.zone.run(() => {\n            this.error$.next(change.error ? change.error.message : null);\n        });\n    }\n\n    /**\n     * Reset credit card form.\n     */\n    private resetForm() {\n        this.error$.next(null);\n    }\n}\n","<mat-tab-group [dynamicHeight]=\"true\" color=\"accent\" [selectedIndex]=\"selectedIndex$ | async\">\n    <mat-tab [label]=\"'Bank Card' | trans\" *ngIf=\"settings.get('billing.stripe.enable')\">\n        <credit-card-form (created)=\"subscribeOnStripe()\" [submitButtonText]=\"submitText\" [showOrderSummary]=\"true\"></credit-card-form>\n    </mat-tab>\n    <mat-tab label=\"Paypal\" [disabled]=\"disablePaypalTab\" *ngIf=\"settings.get('billing.paypal.enable')\">\n        <div class=\"paypal-tab\">\n            <p class=\"info\" trans>After clicking the button below, you will be redirected to paypal.com to approve the subscription.</p>\n            <order-summary></order-summary>\n            <button mat-raised-button color=\"accent\" (click)=\"subscribeOnPaypal()\" [disabled]=\"loading$ | async\">{{submitText | trans}}</button>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Subscription} from '@common/shared/billing/models/subscription';\nimport {Plan} from '@common/core/types/models/Plan';\nimport {CreateSubOnStripeResponse, Subscriptions} from '@common/shared/billing/subscriptions.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {PaypalSubscriptions} from '@common/billing/subscriptions/paypal-subscriptions';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {User} from '@common/core/types/models/User';\nimport {CreditCard} from '@common/billing/upgrade-page/upgrade-page.component';\nimport {BehaviorSubject} from 'rxjs';\nimport {SubscriptionStepperState} from '@common/billing/subscriptions/subscription-stepper-state.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {HttpErrors} from '@common/core/http/errors/http-errors.enum';\n\nexport interface SubscriptionCompletedEvent {\n    status: 'created'|'updated';\n}\n\ninterface NewSubscriptionPayload {\n    card?: CreditCard;\n    start_date?: string;\n    plan_id: number;\n}\n\n@Component({\n    selector: 'create-subscription-panel',\n    templateUrl: './create-subscription-panel.component.html',\n    styleUrls: ['./create-subscription-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreateSubscriptionPanelComponent {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public selectedIndex$ = new BehaviorSubject<number>(0);\n\n    /**\n     * Fired when subscription creation starts or ends.\n     */\n    @Output() loading = new EventEmitter<boolean>();\n\n    /**\n     * Text for submit purchase button.\n     */\n    @Input() submitText = 'Submit Purchase';\n\n    /**\n     * Whether paypal tab should be disabled.\n     */\n    @Input() disablePaypalTab = false;\n\n    /**\n     * We're changing user subscription from this one.\n     * Used for prorating the new subscription start date.\n     */\n    @Input() from: Subscription;\n\n    /**\n     * Plan user should be subscribed to.\n     */\n    @Input() plan: Plan;\n\n    /**\n     * Fired when subscription is created or updated.\n     */\n    @Output() completed: EventEmitter<SubscriptionCompletedEvent> = new EventEmitter();\n\n    constructor(\n        private subscriptions: Subscriptions,\n        private currentUser: CurrentUser,\n        private paypal: PaypalSubscriptions,\n        private toast: Toast,\n        public settings: Settings,\n        private state: SubscriptionStepperState,\n    ) {}\n\n    /**\n     * Subscribe user to current plan on stripe gateway.\n     */\n    public subscribeOnStripe() {\n        // if user is already subscribed to this plan, fire \"updated\" event and bail\n        if (this.currentUser.getSubscription({gateway: 'stripe', planId: this.plan.id})) {\n            return this.completed.emit({status: 'updated'});\n        }\n\n        this.startLoading();\n\n        this.subscriptions.createOnStripe(this.getNewSubscriptionPayload())\n            .subscribe(response => {\n                if (response.status === 'complete') {\n                    this.completeSubscription(response.user);\n                } else if (response.status === 'requires_action') {\n                   this.confirmCardPayment(response);\n                } else {\n                    this.toast.open(response.last_payment_error || HttpErrors.Default);\n                }\n            }, (errResponse: BackendErrorResponse) => {\n                const key = Object.keys(errResponse.errors)[0];\n                this.toast.open(errResponse.errors[key] || HttpErrors.Default);\n                this.stopLoading();\n            });\n    }\n\n    /**\n     * Confirm card payment via 3D secure.\n     */\n    private confirmCardPayment(response: CreateSubOnStripeResponse) {\n        this.state.stripe.confirmCardPayment(response.payment_intent_secret)\n            .then(result => {\n                if (result.error) {\n                    this.stopLoading();\n                    this.toast.open('Card payment was not confirmed.', {action: 'Retry'})\n                        .onAction()\n                        .subscribe(() => {\n                            this.confirmCardPayment(response);\n                        });\n                } else {\n                    this.subscriptions.finalizeOnStripe(response.reference, response.user.id)\n                        .subscribe(finalResponse => {\n                            this.completeSubscription(finalResponse.user);\n                        });\n                }\n            });\n    }\n\n    /**\n     * Subscribe user to current plan on paypal gateway.\n     */\n    public subscribeOnPaypal() {\n        // if user is already subscribed to this plan, fire \"updated\" event and bail\n        if (this.currentUser.getSubscription({gateway: 'paypal', planId: this.plan.id})) {\n            return this.completed.emit({status: 'updated'});\n        }\n\n        this.startLoading();\n\n        this.paypal.subscribe(this.getNewSubscriptionPayload()).then(user => {\n            this.completeSubscription(user);\n            this.selectedIndex$.next(0);\n        }).catch(message => {\n            this.stopLoading();\n            this.toast.open(message || 'There was an issue. Please try again later.');\n        });\n    }\n\n    /**\n     * Get payload for backend for creating a new subscription.\n     */\n    private getNewSubscriptionPayload(): NewSubscriptionPayload {\n       const payload = {plan_id: this.plan.id};\n\n       if (this.from) {\n           payload['start_date'] = this.from.renews_at;\n       }\n\n       return payload;\n    }\n\n    private completeSubscription(user: User) {\n        this.stopLoading();\n        this.currentUser.assignCurrent(user);\n        this.completed.emit({status: 'created'});\n    }\n\n    private startLoading() {\n        this.loading$.next(true);\n        this.loading.emit(true);\n    }\n\n    private stopLoading() {\n        this.loading$.next(false);\n        this.loading.emit(false);\n    }\n}\n","<material-navbar [menuPosition]=\"settings.get('vebto.navbar.defaultPosition')\"></material-navbar>\n\n<div class=\"content container mat-elevation-z1\" *ngIf=\"activeSubscription$ | async as activeSubscription\">\n    <div class=\"main\">\n        <div class=\"main-section\">\n            <div class=\"main-section-title\"><full-plan-name [plan]=\"activeSubscription.plan\"></full-plan-name></div>\n            <div class=\"main-section-content\">\n                <ng-container *ngIf=\"canCancel()\">\n                    <p>\n                        {{ 'Your plan will automatically renew on' | trans }}\n                        <strong>{{getFormattedRenewDate() | formattedDate}}</strong>\n                        {{ \"and you'll be charged\" | trans }}\n                        <strong>{{activeSubscription.plan.amount | currency:activeSubscription.plan.currency}}</strong>.\n                    </p>\n\n                    <a mat-raised-button color=\"accent\" routerLink=\"/billing/upgrade\" trans>Change Plan</a>\n                </ng-container>\n\n                <ng-container *ngIf=\"canResume()\">\n                    <p>{{ 'You are on a grace period until' | trans }} <strong>{{getFormattedEndDate() | formattedDate}}</strong>. {{ 'Your subscription will not automatically resume and you will not be charged' | trans }}.</p>\n                    <p trans>You still have access to your plan's features until this date and you can resume your subscription anytime, by clicking button below.</p>\n                    <button mat-raised-button color=\"accent\" (click)=\"resumeSubscription()\" trans>Resume</button>\n                </ng-container>\n            </div>\n        </div>\n\n        <div class=\"main-section\" *ngIf=\"canCancel() && canChangePaymentMethod()\">\n            <div class=\"main-section-title\" trans>Payment Method</div>\n            <div class=\"main-title-description\" trans>Change your preferred payment method below. You can use a credit card or PayPal.</div>\n\n            <p>{{ 'Current payment Method' | trans }}: <strong>{{activeSubscription.gateway_name === 'paypal' ? 'PayPal' : ('Credit Card' | trans)}}</strong></p>\n\n            <div class=\"card-preview\" *ngIf=\"activeSubscription.gateway_name === 'stripe'\">\n                <div class=\"icon\"><mat-icon svgIcon=\"credit-card\"></mat-icon></div>\n                <div class=\"info\">{{currentUser.get('card_brand')}} **** {{currentUser.get('card_last_four')}}</div>\n            </div>\n\n            <create-subscription-panel\n                    (completed)=\"onPaymentMethodChange($event)\"\n                    (loading)=\"loading$.next($event)\"\n                    [plan]=\"getPlan()\"\n                    [from]=\"activeSubscription\"\n                    [disablePaypalTab]=\"activeSubscription.gateway_name === 'paypal'\"\n                    submitText=\"Change Payment Method\"\n            ></create-subscription-panel>\n        </div>\n\n        <div class=\"main-section\" *ngIf=\"canCancel()\">\n            <div class=\"main-section-title\" trans>Cancel Subscription</div>\n\n            <div class=\"main-section-content\">\n                <p trans>After cancelling subscription, you will have access to your active plan until your billing period end.</p>\n            </div>\n\n            <div class=\"main-section-actions\">\n                <button mat-raised-button color=\"warn\" (click)=\"maybeCancelSubscription()\" trans>Cancel</button>\n            </div>\n        </div>\n    </div>\n\n    <upgrade-page-aside [plan]=\"getPlan()\"></upgrade-page-aside>\n\n    <loading-indicator class=\"overlay\" [isVisible]=\"loading$ | async\"></loading-indicator>\n</div>\n\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { finalize, share } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Subscription } from '@common/shared/billing/models/subscription';\nimport { Settings } from '@common/core/config/settings.service';\nimport { Modal } from '@common/core/ui/dialogs/modal.service';\nimport { Subscriptions } from '@common/shared/billing/subscriptions.service';\nimport { CurrentUser } from '@common/auth/current-user';\nimport { Toast } from '@common/core/ui/toast.service';\nimport { Plan } from '@common/core/types/models/Plan';\nimport { ConfirmModalComponent } from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport { SubscriptionCompletedEvent } from '@common/billing/subscriptions/create-subscription-panel/create-subscription-panel.component';\nimport { User } from '@common/core/types/models/User';\n\n@Component({\n    selector: 'user-subscription-page',\n    templateUrl: './user-subscription-page.component.html',\n    styleUrls: ['./user-subscription-page.component.scss'],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserSubscriptionPageComponent implements OnInit {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public activeSubscription$ = new BehaviorSubject<Subscription>(null);\n\n    constructor(\n        public settings: Settings,\n        private modal: Modal,\n        private subscriptions: Subscriptions,\n        public currentUser: CurrentUser,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        this.activeSubscription$.next(this.currentUser.getSubscription());\n    }\n\n    public canResume() {\n        return this.currentUser.onGracePeriod();\n    }\n\n    public canCancel() {\n        return this.currentUser.isSubscribed() && !this.currentUser.onGracePeriod();\n    }\n\n    public canChangePaymentMethod() {\n        return this.settings.get('billing.stripe.enable') || this.settings.get('billing.paypal.enable');\n    }\n\n    public getFormattedEndDate(): string {\n        if ( ! this.activeSubscription$.value.ends_at) return null;\n        return this.activeSubscription$.value.ends_at.split(' ')[0];\n    }\n\n    public getFormattedRenewDate() {\n        if ( ! this.activeSubscription$.value.renews_at) return null;\n        return this.activeSubscription$.value.renews_at.split(' ')[0];\n    }\n\n    public getPlan(): Plan {\n        return this.activeSubscription$.value.plan;\n    }\n\n    /**\n     * Ask user to confirm deletion of selected templates\n     * and delete selected templates if user confirms.\n     */\n    public maybeCancelSubscription() {\n        this.modal.open(ConfirmModalComponent, {\n            title: 'Cancel Subscription',\n            body: 'Are you sure you want to cancel your subscription?',\n            ok: 'Yes, Cancel',\n            cancel: 'Go Back'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.cancelSubscription().subscribe(() => {\n                this.toast.open('Subscription cancelled.');\n            });\n        });\n    }\n\n    /**\n     * Resume cancelled subscription.\n     */\n    public resumeSubscription() {\n        this.loading$.next(true);\n        this.subscriptions.resume(this.activeSubscription$.value.id)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.currentUser.setSubscription(response.subscription);\n                this.activeSubscription$.next(this.currentUser.getSubscription());\n                this.toast.open('Subscription resumed.');\n            });\n    }\n\n    /**\n     * Called after user payment method for active subscription has been changed successfully.\n     */\n    public onPaymentMethodChange(e: SubscriptionCompletedEvent) {\n        // if we've only changed customer card information on same\n        // payment gateway, show success message and bail\n        if (e.status === 'updated') {\n            this.toast.open('Payment method updated.');\n            return;\n        }\n\n        this.loading$.next(true);\n\n        // otherwise cancel user's subscription on the other gateway\n        this.cancelSubscription({delete: true}).subscribe(() => {\n            this.toast.open('Payment method updated.');\n        });\n    }\n\n    /**\n     * Cancel currently active user subscription.\n     */\n    private cancelSubscription(params: {delete?: boolean} = {}): Observable<{user: User}> {\n        this.loading$.next(true);\n\n        const request = this.subscriptions.cancel(this.activeSubscription$.value.id, {delete: params.delete})\n            .pipe(finalize(() => this.loading$.next(false)))\n            .pipe(share());\n\n        request.subscribe(response => {\n            // set new active subscription, if user had more then one\n            this.updateUserAndSubscription(response.user);\n        });\n\n        return request;\n    }\n\n    /**\n     * Update current user and active subscription.\n     */\n    private updateUserAndSubscription(user: User) {\n        this.currentUser.assignCurrent(user);\n        this.activeSubscription$.next(this.currentUser.getSubscription());\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Resolve, RouterStateSnapshot, ActivatedRouteSnapshot} from '@angular/router';\nimport {map} from 'rxjs/operators';\nimport {ValueLists} from '../../core/services/value-lists.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrenciesListResolver implements Resolve<any> {\n    constructor(private valueLists: ValueLists) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<any> {\n        return this.valueLists.get(['currencies']).pipe(map(response => response.currencies)).toPromise();\n    }\n}\n\n","import {Injectable} from '@angular/core';\nimport {CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild} from '@angular/router';\nimport {CurrentUser} from '../../auth/current-user';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserSubscribedGuard implements CanActivate, CanActivateChild {\n\n    constructor(private currentUser: CurrentUser, private router: Router) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.handle();\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.handle();\n    }\n\n    private handle() {\n        if (this.currentUser.isSubscribed()) { return true; }\n\n        this.router.navigate(['/billing/upgrade']);\n\n        return false;\n    }\n}","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {Invoice} from '@common/billing/invoices/invoice';\n\nconst BASE_URI = 'billing/invoice';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class InvoiceService {\n    constructor(private http: AppHttpClient) {\n    }\n\n    public index(params: {userId?: number} = {}): BackendResponse<{invoices: Invoice[]}> {\n        return this.http.get(`${BASE_URI}`, params);\n    }\n}\n","<material-navbar [menuPosition]=\"settings.get('vebto.navbar.defaultPosition')\"></material-navbar>\n\n<div class=\"container\">\n    <h1 trans>Your Payment History</h1>\n\n    <table class=\"material-table\">\n        <thead>\n        <tr>\n            <th trans>Date</th>\n            <th trans>Amount</th>\n            <th trans>Status</th>\n            <th trans>Invoice</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let invoice of invoices$ | async\">\n            <td>{{invoice.created_at | formattedDate}}</td>\n            <td>{{invoice.subscription.plan.currency_symbol + invoice.subscription.plan.amount}}</td>\n            <td>{{((invoice.paid ? 'Paid' : 'Pending') | trans)}}</td>\n            <td>\n                <a [href]=\"getInvoiceUrl(invoice)\" target=\"_blank\" trans>View</a>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <no-results-message svgImage=\"receipt.svg\" *ngIf=\"!(invoices$ | async).length && !(loading$ | async)\">\n        <span primary-text trans>You do not have any invoices yet.</span>\n    </no-results-message>\n</div>\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {InvoiceService} from '@common/billing/invoices/invoice.service';\nimport {Invoice} from '@common/billing/invoices/invoice';\nimport {BehaviorSubject} from 'rxjs';\nimport {Settings} from '@common/core/config/settings.service';\nimport {finalize} from 'rxjs/operators';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'invoice-index',\n    templateUrl: './invoice-index.component.html',\n    styleUrls: ['./invoice-index.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InvoiceIndexComponent implements OnInit {\n    public invoices$ = new BehaviorSubject<Invoice[]>([]);\n    public loading$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n       private invoices: InvoiceService,\n       public settings: Settings,\n       private currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.invoices.index({userId: this.currentUser.get('id')})\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.invoices$.next(response.invoices);\n            });\n    }\n\n    public getInvoiceUrl(invoice: Invoice) {\n        return this.settings.getBaseUrl(true) + '/secure/billing/invoice/' + invoice.uuid;\n    }\n}\n","import { Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'pricing-page',\n  templateUrl: './pricing-page.component.html',\n  styleUrls: ['./pricing-page.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PricingPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<upgrade-page mode=\"pricing\"></upgrade-page>","import {Route, RouterModule} from '@angular/router';\nimport {UpgradePageComponent} from './upgrade-page/upgrade-page.component';\nimport {NgModule} from '@angular/core';\nimport {BillingPlansResolver} from './upgrade-page/billing-plans-resolver.service';\nimport {UserSubscriptionPageComponent} from './subscriptions/user-subscription-page/user-subscription-page.component';\nimport {CurrenciesListResolver} from './upgrade-page/currencies-list-resolver.service';\nimport {UserSubscribedGuard} from './guards/user-subscribed-guard.service';\nimport {AuthGuard} from '../guards/auth-guard.service';\nimport {BillingEnabledGuard} from '../shared/billing/guards/billing-enabled-guard.service';\nimport {InvoiceIndexComponent} from '@common/billing/invoices/invoice-index/invoice-index.component';\nimport {CheckPermissionsGuard} from '@common/guards/check-permissions-guard.service';\nimport {PricingPageComponent} from '@common/billing/pricing-page/pricing-page.component';\nimport {RedirectToUpgradePage} from '@common/billing/guards/redirect-to-upgrade-page.service';\n\nexport const routes: Route[] = [\n    {\n        path: 'pricing',\n        component: PricingPageComponent,\n        canActivate: [BillingEnabledGuard, RedirectToUpgradePage],\n        resolve: {\n            plans: BillingPlansResolver,\n            currencies: CurrenciesListResolver\n        }\n    },\n    {\n        path: '',\n        canActivate: [BillingEnabledGuard, AuthGuard, CheckPermissionsGuard],\n        canActivateChild: [CheckPermissionsGuard],\n        children: [\n            {\n                path: 'upgrade',\n                component: UpgradePageComponent,\n                resolve: {\n                    plans: BillingPlansResolver,\n                    currencies: CurrenciesListResolver\n                }\n            },\n            {\n                path: 'subscription',\n                component: UserSubscriptionPageComponent,\n                resolve: { plans: BillingPlansResolver },\n                canActivate: [UserSubscribedGuard],\n                data: { name: 'subscription' }\n            },\n            {\n                path: 'invoices',\n                component: InvoiceIndexComponent,\n                canActivate: [UserSubscribedGuard],\n            },\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class BillingRoutingModule {}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {CurrentUser} from '../../auth/current-user';\nimport {AppearanceListenerService} from '../../shared/appearance/appearance-listener.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RedirectToUpgradePage implements CanActivate {\n    constructor(\n        private currentUser: CurrentUser,\n        private router: Router,\n        private listener: AppearanceListenerService,\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        if (this.listener.active) {\n            return true;\n        }\n        if (this.currentUser.isSubscribed()) {\n            this.router.navigate(['billing/subscription']);\n            return false;\n        } else if (this.currentUser.isLoggedIn()) {\n            this.router.navigate(['billing/upgrade']);\n            return false;\n        }\n        return true;\n    }\n}\n","<div class=\"plans\" [class.has-recommended]=\"hasRecommendedPlan\">\n    <div class=\"plan\" *ngFor=\"let plan of getAllPlans(); last as last; first as first\" [class.recommended]=\"plan.recommended\" [class.last]=\"last\" [class.first]=\"first\">\n        <div class=\"name\" trans>{{plan.name}}</div>\n        <div class=\"price-box\" *ngIf=\"!plan.free\">\n            <span class=\"number\">{{plan.amount | currency:plan.currency}}</span>\n            <span class=\"interval\"> / {{plan.interval | trans}}</span>\n        </div>\n        <div class=\"price-box\" *ngIf=\"plan.free\" trans>Free</div>\n        <plan-features-list [plan]=\"plan\"></plan-features-list>\n        <button class=\"select-plan-button\" (click)=\"selectPlan(plan)\" mat-raised-button color=\"accent\" *ngIf=\"plan.recommended\" [disabled]=\"shouldDisablePlanSelection(plan)\">\n            {{ selectPlanButtonText(plan) | trans }}\n        </button>\n        <button class=\"select-plan-button\" (click)=\"selectPlan(plan)\" mat-stroked-button color=\"accent\" *ngIf=\"!plan.recommended\" [disabled]=\"shouldDisablePlanSelection(plan)\">\n            {{ selectPlanButtonText(plan) | trans }}\n        </button>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    OnInit,\n    Output,\n} from '@angular/core';\nimport {SubscriptionStepperState} from '../../subscriptions/subscription-stepper-state.service';\nimport {Plan} from '@common/core/types/models/Plan';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'select-plan-panel',\n    templateUrl: './select-plan-panel.component.html',\n    styleUrls: ['./select-plan-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectPlanPanelComponent implements OnInit {\n    public hasRecommendedPlan = false;\n    @Output() selected = new EventEmitter();\n\n    constructor(\n        public state: SubscriptionStepperState,\n        public currentUser: CurrentUser\n    ) {}\n\n    ngOnInit() {\n        this.hasRecommendedPlan =\n            this.state.plans.filter(plan => plan.recommended).length > 0;\n    }\n\n    public selectPlan(plan: Plan) {\n        this.state.selectInitialPlan(plan);\n        // fire event on next render to avoid race conditions\n        setTimeout(() => this.selected.emit(plan));\n    }\n\n    public getAllPlans() {\n        return this.state.plans.filter(plan => !plan.parent_id && !plan.hidden);\n    }\n\n    public userSubscribedToPlan(plan: Plan): boolean {\n        if (\n            this.state.mode !== 'pricing' &&\n            plan.free &&\n            !this.currentUser.model$?.value?.subscriptions?.length\n        ) {\n            return true;\n        }\n        return !!this.currentUser.getSubscription({planId: plan.id});\n    }\n\n    public selectPlanButtonText(plan: Plan) {\n        if (this.userSubscribedToPlan(plan)) {\n            return 'Your Current Plan';\n        } else if (plan.free && this.state.mode === 'pricing') {\n            return 'Get Started';\n        } else {\n            return 'Choose Plan';\n        }\n    }\n\n    shouldDisablePlanSelection(plan: Plan) {\n        return (\n            (this.state.mode !== 'pricing' && plan.free) ||\n            this.userSubscribedToPlan(plan)\n        );\n    }\n}\n","<div class=\"subscription-period-step step-container\" *ngIf=\"state.initialPlan$ | async as initialPlan\">\n    <div class=\"left-col\">\n        <div class=\"title\" trans>Select the duration of your plan. Longer plans offer better discounts!</div>\n        <mat-radio-group class=\"periods\" [(ngModel)]=\"state.radioGroupModel\" (change)=\"state.selectPlanById(state.radioGroupModel)\">\n            <div class=\"radio-button-wrapper no-label\">\n                <mat-radio-button [value]=\"initialPlan.id\" class=\"period\" color=\"accent\">\n                    <div class=\"radio-button-content\">\n                        <div class=\"name\">1 {{initialPlan.interval | trans}} {{ 'subscription' | trans }}:</div>\n                        <div class=\"price\">{{initialPlan.amount | currency:initialPlan.currency}}/{{initialPlan.interval | trans}}</div>\n                    </div>\n                </mat-radio-button>\n            </div>\n            <div class=\"radio-button-wrapper\" *ngFor=\"let plan of state.getChildPlans(initialPlan)\">\n                <ng-container *ngIf=\"state.selectedPlan$ | async as selectedPlan\">\n                    <div class=\"savings-label\">{{'Save' | trans}} {{getPlanSavings(selectedPlan.parent || selectedPlan, plan)}}%</div>\n                </ng-container>\n                <mat-radio-button [value]=\"plan.id\" class=\"period\" color=\"accent\">\n                    <div class=\"radio-button-content\">\n                        <div class=\"name\">{{plan.name | trans}}:</div>\n                        <div class=\"price\">{{getAmountForSingleInterval(plan) | currency:plan.currency}}/{{(plan.interval || initialPlan.interval) | trans}}</div>\n                    </div>\n                </mat-radio-button>\n            </div>\n        </mat-radio-group>\n\n        <div class=\"actions\">\n            <button mat-button matStepperPrevious trans>Back</button>\n            <button mat-raised-button color=\"accent\" (click)=\"selected.emit()\">\n                {{ (state.mode === 'changePlan' ? 'Change Plan' : 'Select') | trans }}\n            </button>\n        </div>\n    </div>\n\n    <upgrade-page-aside *ngIf=\"showSidebar\" [plan]=\"state.selectedPlan$ | async\" class=\"right-col\"></upgrade-page-aside>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { SubscriptionStepperState } from '../../subscriptions/subscription-stepper-state.service';\nimport { Plan } from '@common/core/types/models/Plan';\n\n@Component({\n    selector: 'select-plan-period-panel',\n    templateUrl: './select-plan-period-panel.component.html',\n    styleUrls: ['./select-plan-period-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectPlanPeriodPanelComponent {\n    @Input() showSidebar = false;\n    @Output() selected = new EventEmitter();\n\n    constructor(\n        public state: SubscriptionStepperState,\n    ) {}\n\n    public getPlanSavings(base: Plan, parent: Plan): number {\n        const baseAmount = this.getAmountPerDay(base);\n        const amount = this.getAmountPerDay(parent);\n        const savings = (baseAmount - amount) / baseAmount * 100;\n        return Math.ceil(savings);\n    }\n\n    private getAmountPerDay(plan: Plan) {\n        let days = 1;\n        if (plan.interval === 'week') {\n            days = 7;\n        } else if (plan.interval === 'month') {\n            days = 30;\n        } else if (plan.interval === 'year') {\n            days = 365;\n        }\n        days = days * plan.interval_count;\n        return plan.amount / days;\n    }\n\n    public getAmountForSingleInterval(plan: Plan) {\n        return plan.amount / plan.interval_count;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild} from '@angular/router';\nimport {CurrentUser} from '../../auth/current-user';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserNotSubscribedGuard implements CanActivate, CanActivateChild {\n\n    constructor(private currentUser: CurrentUser, private router: Router) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.handle();\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.handle();\n    }\n\n    private handle() {\n        if ( ! this.currentUser.isSubscribed()) { return true; }\n\n        this.router.navigate(['/billing/subscription']);\n\n        return false;\n    }\n}\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\n\n@Component({\n    selector: 'contact-widget',\n    templateUrl: './contact-widget.component.html',\n    styleUrls: ['./contact-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContactWidgetComponent {}\n","<mat-icon svgIcon=\"question-answer\" class=\"icon\"></mat-icon>\n\n<div class=\"title\" trans>Do you have any questions about PRO accounts?</div>\n<div class=\"subtitle\" trans>Our support team will be happy to assist you.</div>\n<a mat-raised-button color=\"accent\" target=\"_blank\" routerLink=\"/contact\" trans>Contact Us</a>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { UpgradePageComponent } from './upgrade-page/upgrade-page.component';\nimport { BillingPlansResolver } from './upgrade-page/billing-plans-resolver.service';\nimport { BillingRoutingModule } from './billing-routing.module';\nimport { PlanFeaturesListComponent } from './upgrade-page/plan-features-list/plan-features-list.component';\nimport { OrderSummaryComponent } from './upgrade-page/order-summary/order-summary.component';\nimport { AcceptedPaymentsHeaderComponent } from './upgrade-page/accepted-payments-header/accepted-payments-header.component';\nimport { UserSubscriptionPageComponent } from './subscriptions/user-subscription-page/user-subscription-page.component';\nimport { UpgradePageAsideComponent } from './upgrade-page/upgrade-page-aside/upgrade-page-aside.component';\nimport { CurrenciesListResolver } from './upgrade-page/currencies-list-resolver.service';\nimport { CreditCardFormComponent } from './credit-card-form/credit-card-form.component';\nimport { PaypalSubscriptions } from './subscriptions/paypal-subscriptions';\nimport { SelectPlanPanelComponent } from './plans/select-plan-panel/select-plan-panel.component';\nimport { SelectPlanPeriodPanelComponent } from './plans/select-plan-period-panel/select-plan-period-panel.component';\nimport { SubscriptionStepperState } from './subscriptions/subscription-stepper-state.service';\nimport { UserNotSubscribedGuard } from './guards/user-not-subscribed-guard.service';\nimport { UserSubscribedGuard } from './guards/user-subscribed-guard.service';\nimport { CreateSubscriptionPanelComponent } from './subscriptions/create-subscription-panel/create-subscription-panel.component';\nimport { ContactWidgetComponent } from './upgrade-page/contact-widget/contact-widget.component';\nimport { FullPlanNameModule } from '../shared/billing/full-plan-name/full-plan-name.module';\nimport { InvoiceIndexComponent } from '@common/billing/invoices/invoice-index/invoice-index.component';\nimport { PricingPageComponent } from './pricing-page/pricing-page.component';\nimport { MaterialNavbarModule } from '@common/core/ui/material-navbar/material-navbar.module';\nimport { TranslationsModule } from '@common/core/translations/translations.module';\nimport { FormatPipesModule } from '@common/core/ui/format-pipes/format-pipes.module';\nimport { NoResultsMessageModule } from '@common/core/ui/no-results-message/no-results-message.module';\nimport { LoadingIndicatorModule } from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialNavbarModule,\n        BillingRoutingModule,\n        FullPlanNameModule,\n        TranslationsModule,\n        FormatPipesModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatSnackBarModule,\n        MatCheckboxModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatStepperModule,\n        MatProgressBarModule,\n        MatTabsModule,\n        MatRadioModule,\n    ],\n    declarations: [\n        UpgradePageComponent,\n        PlanFeaturesListComponent,\n        OrderSummaryComponent,\n        AcceptedPaymentsHeaderComponent,\n        UserSubscriptionPageComponent,\n        UpgradePageAsideComponent,\n        CreditCardFormComponent,\n        CreateSubscriptionPanelComponent,\n        SelectPlanPanelComponent,\n        SelectPlanPeriodPanelComponent,\n        ContactWidgetComponent,\n        InvoiceIndexComponent,\n        PricingPageComponent,\n    ],\n    providers: [\n        BillingPlansResolver,\n        CurrenciesListResolver,\n        PaypalSubscriptions,\n        SubscriptionStepperState,\n        SubscriptionStepperState,\n        UserNotSubscribedGuard,\n        UserSubscribedGuard,\n    ],\n    exports: [\n        BillingRoutingModule,\n    ]\n})\nexport class BillingModule {\n}\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {Plan} from '@common/core/types/models/Plan';\nimport {Translations} from '@common/core/translations/translations.service';\nimport {ucFirst} from '@common/core/utils/uc-first';\n\n@Component({\n    selector: 'full-plan-name',\n    template: '{{getFullPlanName()}}',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullPlanNameComponent {\n    @Input() plan: Plan;\n\n    constructor(private i18n: Translations) {}\n\n    public getFullPlanName(): string {\n        if ( ! this.plan) return;\n        let name = this.plan.parent ? this.plan.parent.name : this.plan.name;\n        name = ucFirst(this.i18n.t(name));\n        name += ' ' + this.i18n.t('Plan');\n        if (this.plan.parent) name += ': ' + this.plan.name;\n        return name;\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {FullPlanNameComponent} from './full-plan-name.component';\n\n@NgModule({\n    declarations: [\n        FullPlanNameComponent,\n    ],\n    exports: [\n        FullPlanNameComponent,\n    ]\n})\nexport class FullPlanNameModule {}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild} from '@angular/router';\nimport {Settings} from '@common/core/config/settings.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BillingEnabledGuard implements CanActivate, CanActivateChild {\n    constructor(private settings: Settings, private router: Router) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.handle();\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.handle();\n    }\n\n    private handle() {\n        if (this.settings.get('billing.integrated') && this.settings.get('billing.enable')) {\n            return true;\n        }\n\n        this.router.navigate(['/']);\n        return false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AppHttpClient } from '../../core/http/app-http-client.service';\nimport { PaginatedBackendResponse } from '../../core/types/pagination/paginated-backend-response';\nimport { BackendResponse } from '@common/core/types/backend-response';\nimport { Plan } from '@common/core/types/models/Plan';\nimport { PaginationParams } from '@common/core/types/pagination/pagination-params';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class Plans {\n    static BASE_URI = 'billing-plan';\n    constructor(private http: AppHttpClient) {}\n\n    public all(params?: PaginationParams): PaginatedBackendResponse<Plan> {\n        return this.http.get(Plans.BASE_URI, params);\n    }\n\n    public get(id: number): BackendResponse<{plan: Plan}> {\n        return this.http.get(`${Plans.BASE_URI}/${id}`);\n    }\n\n    public create(params: object): BackendResponse<{plan: Plan}> {\n        return this.http.post(Plans.BASE_URI, params);\n    }\n\n    public update(id: number, params: object): BackendResponse<{plan: Plan}> {\n        return this.http.put(`${Plans.BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${Plans.BASE_URI}/${ids}`);\n    }\n\n    public sync(): BackendResponse<void> {\n        return this.http.post(`${Plans.BASE_URI}/sync`);\n    }\n}\n"],"sourceRoot":"webpack:///"}